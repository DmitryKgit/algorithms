https://ru.wikipedia.org/wiki/Парадигма_программирования
' Паради́гма программи́рования — 
это совокупность идей и понятий, определяющих стиль написания компьютерных программ (подход к программированию).
Это способ концептуализации, определяющий организацию вычислений и структурирование работы,
выполняемой компьютером.

' Императивная парадигма - пишем команды (императивы), описывающие шаги программы, НО не состояния системы. ru.wikipedia.org/wiki/Императивное_программирование
1) https://ru.wikipedia.org/wiki/Императивное_программирование
Императи́вное программи́рование — это парадигма программирования, которая, в отличие от декларативного программирования, описывает процесс вычисления в виде инструкций, изменяющих состояние данных.
1) Первыми императивными языками были машинные коды
2) Asm
MOV AX, BX
ADD AX, 2
JMP 12345
3) В 1954 году появился первый «человеческий» высокоуровневый язык программирования — FORTRAN

Императи́вное программи́рование — это парадигма программирования (стиль написания исходного кода компьютерной программы), для которого характерно следующее:

в исходном коде программы записываются инструкции (команды);
инструкции должны выполняться последовательно;
при выполнении инструкции данные, полученные при выполнении предыдущих инструкций, могут читаться из памяти;
данные, полученные при выполнении инструкции, могут записываться в память.

' Декларативная парадигма - описывает состояния системы, НО не команды переходов между состояниями. ru.wikipedia.org/wiki/Декларативное_программирование
2) https://ru.wikipedia.org/wiki/Декларативное_программирование
пример:
HTML
SQL:
SELECT NAME,DATE,AMOUNT FROM TABLE_SALES WHERE MANAGER="TOM CARRY" and date=12/10/2016


' 3) https://ru.wikipedia.org/wiki/Функциональное_программирование
Функциональное программирование предполагает обходиться вычислением результатов функций от исходных данных и результатов других функций, и не предполагает явного хранения состояния программы.
Таким образом, в императивном программировании при вызове одной и той же функции с одинаковыми параметрами, но на разных этапах выполнения алгоритма, можно получить разные данные на выходе из-за влияния на функцию состояния переменных. А в функциональном языке при вызове функции с одними и теми же аргументами мы всегда получим одинаковый результат: выходные данные зависят только от входных.

В отличие от императивного стиля, описывающего шаги, ведущие к достижению цели, функциональный стиль описывает математические отношения между данными и целью.

Чистые функции

Чистыми называют функции, которые не имеют побочных эффектов ввода-вывода и памяти (они зависят только от своих параметров и возвращают только свой результат). Чистые функции обладают несколькими полезными свойствами, многие из которых можно использовать для оптимизации кода:
Если результат чистой функции не используется, её вызов может быть удален без вреда для других выражений.
Результат вызова чистой функции может быть мемоизирован, то есть сохранен в таблице значений вместе с аргументами вызова. Если в дальнейшем функция вызывается с этими же аргументами, её результат может быть взят прямо из таблицы, не вычисляясь (иногда это называется принципом прозрачности ссылок). Мемоизация, ценой небольшого расхода памяти, позволяет существенно увеличить производительность и уменьшить порядок роста некоторых рекурсивных алгоритмов.
Если нет никакой зависимости по данным между двумя чистыми функциями, то порядок их вычисления можно поменять или распараллелить (говоря иначе вычисление чистых функций удовлетворяет принципам thread-safe)
Если весь язык не допускает побочных эффектов, то можно использовать любую политику вычисления. Это предоставляет свободу компилятору комбинировать и реорганизовывать вычисление выражений в программе (например, исключить древовидные структуры).

First class value - полноправный объект.
Для ФП необходимо, чтобы функция была полноправным объектом (first class value).
HOF (higher order function) - функция высшая порядка: функция, использующая другую функцию как аргумент, или возвращаемое значение.

def factorial(n):
  if n==1:
    return 1
  return n*factorial(n-1) # рекурсия

f=int(input())
print(factorial(f))

Свободная переменная - переменная, не связанная в локальной области видимости.
Смысл ООП: инкапсуляция в обьект данных и методов обработки этих данных.
Смысл замыкания: инкапсуляция в замыкание кода, и свободных переменных, которые использует этот код.



Императивные (1) подходы:


2) https://ru.wikipedia.org/wiki/Структурное_программирование
Инкапсуляция кода и данных на уровне блока кода.
последовательность — обозначается: f THEN g,
ветвление — обозначается: IF p THEN f ELSE g,
цикл — обозначается: WHILE p DO f,
' Процеду́рное программи́рование — программирование на императивном языке, при котором последовательно выполняемые операторы можно собрать в подпрограммы, то есть более крупные целостные единицы кода, с помощью механизмов самого языка. ru.wikipedia.org/wiki/Процедурное_программирование 
3) https://ru.wikipedia.org/wiki/Процедурное_программирование
https://en.wikipedia.org/wiki/Procedural_programming
Инкапсуляция кода и данных на уровне подпрограммы (процедуры, функции, метода).
Подпрограмма - изолированный средствами самого языка, функционально законченный блок кода. (subroutine, sub)

Процедурное программирование - разделение кода на подпрограммы.
Парадигма состоит в том, что подпрограмма получает данные только через аргументы, возвращает только через возвращаемое значение, и НЕ использует глобальных переменных.

Procedural programming is a programming paradigm, derived from structured programming, based on the concept of the procedure call. Procedures, also known as routines, subroutines, or functions, simply contain a series of computational steps to be carried out. Any given procedure might be called at any point during a program's execution, including by other procedures or itself.

Inputs are usually specified syntactically in the form of arguments and the outputs delivered as return values.



' Объе́ктно-ориенти́рованное программи́рование (ООП) — методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования.
4) OOP
https://ru.wikipedia.org/wiki/Объектно-ориентированное_программирование
Инкапсуляция кода и данных (методы и свойства) на уровне класса.
' Мо́дуль — функционально законченный фрагмент программы. Во многих языках (но далеко не обязательно) оформляется в виде отдельного файла с исходным кодом или поименованной непрерывной её части. Некоторые языки предусматривают объединение модулей в пакеты. ru.wikipedia.org/wiki/Модульное_программирование
5) https://ru.wikipedia.org/wiki/Модульное_программирование
https://en.wikipedia.org/wiki/Modular_programming
Инкапсуляция кода, данных, классов на уровне модуля (package).

императивное -> структурное -> процедурное ->
-> модульное
-> ООП
-> функциональное прогр.

Структурное программирование - инкапсуляция императивов на уровне структуры.
Процедурное программирование - инкапсуляция структур на уровне процедуры (функция).
Модульное программирование - инкапсуляция процедур (функций), данных, классов на уровне модуля.
ООП - инкапсуляция методов (функций) и данных на уровне обьекта.

ООП с классами:
Объект — это экземпляр класса. Данные объекта скрыты от остальной программы. Сокрытие данных называется инкапсуляцией.

Локальная переменная - переменная обьявленая внутри функции, и доступная внутри функции.
Глобальная переменная - переменная объявленная вне функции, но доступная внутри функции.
Функция - именованый блок кода, возвращающий значение.
Процедура - именованый блок кода, не возвращающий значение.

Аргумент - значение передаваемое в функцию (входные данные).
Параметр - локальная переменная функции, предназначенная для аргумента.
2 отличия: Параметр - переменная, аргумент - значение.
Параметр - внутри метода, аргумент - снаружи.
2 сходства: Совпадает количество и тип параметров и аргументов.

' OOP - ООП     https://ru.wikipedia.org/wiki/Объектно-ориентированное_программирование
Обьект - адрес в памяти, в котором хранится значение определенного типа.
С2: Обьект - место в памяти, имеющее тип, который определяет вид информации, разрешенной для хранения.
Тип - набор возможных значений и операций, выполняемых над обьектом.
В ООП обьект - данные 2 видов: данные, код.
ООП - программирование с использованием обьектов.
https://ru.wikipedia.org/wiki/Объектно-ориентированное_программирование
Все ли обьекты являются экземплярами классами?
int i=0; // Обьект, но не экземпляр
Класс - тип обьекта.
Обьект - экземпляр класса.
C# - ООП не до конца.
string s="Hi!"; // обьект и экземпляр
for(int i=0; i<N; i++)
for(Integer i=0; i<N; i++)
int i;
string s;
declaration + definition
declaration
В центре ООП находится понятие объекта.
Объект — это сущность, которой можно посылать сообщения и которая может на них реагировать, используя свои данные.
Объект — это экземпляр класса. Данные объекта скрыты от остальной программы. Сокрытие данных называется инкапсуляцией.
ООП возникло в результате развития идеологии процедурного программирования, где данные и подпрограммы (процедуры, функции) их обработки формально не связаны.
императивное -> структурное -> процедурное ->
-> модульное
-> ООП
-> функциональное прогр.
' 1) https://ru.wikipedia.org/wiki/Прототипное_программирование
Прототипное программирование — стиль объектно-ориентированного программирования, при котором отсутствует понятие класса, а наследование производится путём клонирования существующего экземпляра объекта — прототипа.
Абстракция данных, Абстрагирование - нет!
' 2) class-based OOP
ООП с классами
https://en.wikipedia.org/wiki/Class-based_programming
Class-based programming, or more commonly class-orientation, is a style of object-oriented programming (OOP) in which inheritance is achieved by defining classes of objects, as opposed to the objects themselves (compare prototype-based programming).
C++ C# Java Swift D Python Ruby Lua Object Pascal, Visual Basic ...
obj -> class + object


Свободная переменная - переменная, не связанная в локальной области видимости.
Смысл ООП: инкапсуляция в обьект данных и методов обработки этих данных.
Смысл замыкания: инкапсуляция в замыкание кода, и свободных переменных, которые использует этот код.

metaprogramming is about creating functions and classes whose main goal is to manipulate code 

