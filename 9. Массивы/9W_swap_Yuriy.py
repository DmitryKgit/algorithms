'''
Дан список целых чисел. Требуется “сжать” его,
переместив все ненулевые элементы в левую часть списка,
не меняя их порядок, а все нули - в правую часть.
Порядок ненулевых элементов изменять нельзя, дополнительный список
использовать нельзя, задачу нужно выполнить за один проход по списку.
Распечатайте полученный список.

Входные данные
Вводится список чисел. Все числа списка находятся на одной строке.

Выходные данные
Выведите ответ на задачу.

Примеры
входные данные
4 0 5 0 3 0 0 5
выходные данные
4 5 3 5 0 0 0 0

Алгоритм SWAP (обмен): нулевые и ненулевые значения меняются местами.
Если элемент списка равен нулю, а предыдущий не равен нулю,
индекс записывается в переменную zero

Если элемент не равен нулю и где-то до него были нули, он меняется
местами с первым нулём. При этом следующий ноль будет на позиции
с индексом zero + 1.


2) 9W_swap: 
Алгоритм SWAP (обмен): нулевые и ненулевые значения меняются местами.
spisok[zero], spisok[i] = spisok[i], 0
нужно, просматривая в цикле слева направо список, запоминать положение нулей,
и замещать нули ненулевыми элементами, 
поменям местами крайний левый ноль и очередной ненулевой элемент.
Нельзя использовать в цикле append, pop и другие линейные методы.
Алгоритм должен иметь линейный порядок роста. 

3) 9W_shift: 
Алгоритм SHIFT: присваивание, а не обмен местами.
spisok[i] = spisok[zero]
Нужно, просматривая в цикле слева направо список, запоминать положение нулей,
и замещать нули ненулевыми элементами.
Может потребовать второй цикл для записи нулей на нужные места
в оставшейся правой части списка.
Нельзя использовать в цикле append, pop и другие линейные методы.
Алгоритм должен иметь линейный порядок роста. 

TEST 100%
'''

spisok = [int(elem) for elem in input().split()]
zero = -1 # Индекс первого нуля в списке. i никогда не примет значение -1
for i in range(len(spisok)): # Просматривать в цикле слева направо список (линейный порядок роста),  
    if spisok[i] == 0 and spisok[i - 1] != 0: # запоминать положение крайних левых нулей 
        zero = i
    if spisok[i] != 0 and zero != -1: # и замещать нули ненулевыми элементами,
        spisok[zero], spisok[i] = spisok[i], 0 # поменям местами крайний левый ноль и очередной ненулевой элемент.
        zero += 1
print(*spisok)
